substitutions:
  devicename: presence1
  name: Presence 1
  static_ip: !secret presence1_static_ip
  wifi_ap_password: !secret ap_password
  ota_password: !secret presence1_ota_password
  encryption_key: !secret presence1_encryption_key

  # Settings
  delayed_off: 10s

packages:
  device_base: !include packages/device_base.yaml

esphome:
  name: $devicename
  platform: ESP32
  board: esp32doit-devkit-v1

status_led:
  pin: GPIO2

bluetooth_proxy:
  active: true

binary_sensor:
  - platform: gpio
    id: mmwave
    name: ${name} mmWave
    device_class: occupancy
    pin:
      number: GPIO27
      mode: INPUT_PULLDOWN

  - platform: gpio
    id: pir
    name: ${name} pir
    pin:
      number: GPIO13
      mode: INPUT_PULLDOWN
    device_class: motion
    filters:
      - delayed_off: ${delayed_off}

  - platform: template
    name: ${name} Occupancy
    id: occupancy
    device_class: occupancy
    filters:
      - delayed_off: ${delayed_off}
    lambda: |-
      if (id(mmwave).state or id(pir).state) {
        return true;
      }
      else if (id(mmwave).state == 0 and id(pir).state == 0) {
        return false;
      }
      else {
        return id(occupancy).state;
      }

uart:
  id: uart_bus
  tx_pin: GPIO25
  rx_pin: GPIO33
  baud_rate: 115200
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\n"
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);

switch:
  - platform: template
    name: ${name} mmWave Sensor
    id: mmwave_sensor
    entity_category: config
    optimistic: true
    restore_state: true
    turn_on_action:
      - uart.write: "sensorStart"
      - delay: 1s
    turn_off_action:
      - uart.write: "sensorStop"
      - delay: 1s

  - platform: template
    name: ${name} mmWave LED
    id: mmwave_led
    entity_category: config
    optimistic: true
    restore_state: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: ${name} uart_presence_output
    id: uart_presence_output
    entity_category: config
    optimistic: true
    restore_state: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 1 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: ${name} uart_target_output
    id: uart_target_output
    entity_category: config
    optimistic: true
    restore_state: true
    assumed_state: false
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 2 1 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 2 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

number:
  - platform: template
    name: ${name} mmWave Distance
    id: mmwave_distance
    entity_category: config
    min_value: 0
    max_value: 900
    initial_value: 400
    optimistic: true
    step: 25
    restore_value: true
    unit_of_measurement: cm
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda int cm = (int)ceil(x / 15.0);
          std::string cms = "detRangeCfg -1 0 " + to_string(cm);
          return std::vector<unsigned char>(cms.begin(), cms.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: ${name} mmWave Off Latency
    id: mmwave_off_latency
    entity_category: config
    min_value: 1
    max_value: 60
    initial_value: 15
    optimistic: true
    step: 1
    restore_value: true
    unit_of_measurement: seconds
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda |-
          std::string mss = "setLatency " + to_string(id(mmwave_on_latency).state) + " " + to_string(id(mmwave_off_latency).state);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: ${name} mmWave On Latency
    id: mmwave_on_latency
    entity_category: config
    min_value: 0
    max_value: 60
    initial_value: 0
    optimistic: true
    step: 0.5
    restore_value: true
    unit_of_measurement: seconds
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda |-
          std::string mss = "setLatency " + to_string(id(mmwave_on_latency).state) + " " + to_string(id(mmwave_off_latency).state);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: ${name} mmWave Sensitivity
    id: mmwave_sensitivity
    entity_category: config
    min_value: 0
    max_value: 9
    initial_value: 7
    optimistic: true
    step: 1
    restore_value: true
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write:
          !lambda std::string mss = "setSensitivity " + to_string((int)x);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

button:
  - platform: template
    name: ${name} Restart mmWave Sensor
    id: restart_mmwave
    entity_category: config
    internal: true
    on_press:
      - uart.write: "resetSystem"

  - platform: template
    name: ${name} Restart mmWave and device
    entity_category: config
    on_press:
      - button.press: restart_mmwave
      - button.press: ${devicename}_esphome_restart

  - platform: template
    name: ${name} Factory Reset mmWave
    id: factory_reset_mmwave
    entity_category: config
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
